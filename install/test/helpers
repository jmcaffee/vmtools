#!/usr/bin/env bash
##############################################################################
# File::    helpers
# Purpose:: Testing helper functions
# 
# Author::    Jeff McAffee 08/22/2012
# Copyright:: Copyright (c) 2012, kTech Systems LLC. All rights reserved.
# Website::   http://ktechsystems.com
##############################################################################


##############################################
# Global variables
#


vmtools_root=/opt/vmtools
vmtools_bin=$vmtools_root/bin
vmtools_avail_vms=$vmtools_root/avail-vms
vmtools_active_vms=$vmtools_root/active-vms

##############################################
# Tab and test stats global vars
#

TAB_LEVEL=${TAB_LEVEL:-0}       # Defaults to 0.
TESTS_RUN=${TESTS_RUN:-0}      # Defaults to 0.
PASSES=${PASSES:-0}            # Defaults to 0.
FAILURES=${FAILURES:-0}        # Defaults to 0.


##############################################
# Color Codes for colorfull messages
#

#  Color        Foreground      Background
#  black        30              40
#  red          31              41
#  green        32              42
#  yellow       33              43
#  blue         34              44
#  magenta      35              45
#  cyan         36              46
#  white        37              47

# Color code variables
#
black='\E[30;40m'
red='\E[31;40m'
green='\E[32;40m'
yellow='\E[33;40m'
blue='\E[34;40m'
magenta='\E[35;40m'
cyan='\E[36;40m'
white='\E[37;40m'


#---------------------------------------------
# get_vmdk
#
# Return a vmdk
#
function get_vmdk () {
    local varname="testing get_vmdk"
    echo "vmtools_root=$vmtools_root"
    echo "vmtools_bin=$vmtools_bin"
    echo "vmtools_avail_vms=$vmtools_avail_vms"
    echo "vmtools_active_vms=$vmtools_active_vms"
    
}
export -f get_vmdk



#---------------------------------------------
# is_linux_os
#
# Exit with 0 if OS is Linux, 1 otherwise.
#
function is_linux_os () {
    if [[ "x$(uname)" == "xLinux" ]]; then
        exit 0;
    fi
    exit 1;
}
export -f is_linux_os


#---------------------------------------------
# test_stats
#
# Output test stats
#
function test_stats () {
    local tests_run=0
    local passes=0
    local failures=0

    tests_run=${TESTS_RUN:-$tests_run}  # Defaults to 0.
    passes=${PASSES:-$passes}        # Defaults to 0.
    failures=${FAILURES:-$failures}    # Defaults to 0.
   
    echo "------------------------------"
    echo ""
    echo "Tests run: $tests_run"
    if [ $passes -gt 0 ] ; then
        color_msg "Passes:    $passes" "$green";
    else
        echo "Passes:    $passes"
    fi
    if [ $failures -gt 0 ] ; then
        color_msg "Failures:  $failures" "$red";
    else
        echo "Failures:  $failures"
    fi
    
}
export -f test_stats





#---------------------------------------------
# get_tab
#
# Returns a string of spaces based on the current TAB_LEVEL.
#
function get_tab () {
    local tab=""
    local i
    for (( i = 0; i < $TAB_LEVEL; i++ )); do
        tab="$tab  "
    done
    echo "$tab"
}
export -f get_tab



#---------------------------------------------
# describe
#
# Helper function for testing
#
function describe () {
    local msg=""
    msg=${1:-$msg}        # Defaults to $msg.
    if [[ -n $msg ]]; then
        tab=$(get_tab)
        #color_msg "$tab$msg" "$white"     # Slower, and we want the default color anyways.
        echo "$tab$msg"
    fi
    let "TAB_LEVEL += 1"
    #echo "TAB_LEVEL: $TAB_LEVEL"
}
export -f describe


#---------------------------------------------
# end_describe
#
# Helper function for testing
#
function end_describe () {
    let "TAB_LEVEL -= 1"
    echo ""
}
export -f end_describe


#---------------------------------------------
# it
#
# Helper function for testing
#
function it () {
    local msg=""
    let "TESTS_RUN += 1"
    msg=${1:-$msg}        # Defaults to $msg.
    if [[ -n $msg ]]; then
        tab=$(get_tab)
        color_msg "$tab$msg" "$cyan"
        #echo "$tab$msg"
    fi
    let "TAB_LEVEL += 1"
    #echo "TAB_LEVEL: $TAB_LEVEL"
}
export -f it


#---------------------------------------------
# end_it
#
# Helper function for testing
#
function end_it () {
    let "TAB_LEVEL -= 1"
    echo ""
}
export -f end_it


#---------------------------------------------
# color_msg
#
# Echo a message in colored text.
#
function color_msg () {
    local msg=""
    local color="$white"

    msg=${1:-$msg}      # Defaults to default msg.
    color=${2:-$color}        # Defaults to $color.

    # If $msg isn't quoted, it's interpreted as multiple args.
    if [ -n "$msg" ]; then
        echo -en "$color"
        echo -n "$msg"

        if ( is_linux_os ); then
            (tput sgr0)
            echo ""     # Need to send a new line.
        else
            echo -e "$white"
        fi
    fi
}
export -f color_msg


#---------------------------------------------
# fail
#
# Echo a message in red text.
#
function fail () {
    local msg="fail"
    let "FAILURES += 1"
    msg=${1:-$msg}      # Defaults to default msg.
    # If $msg isn't quoted, it's interpreted as multiple args.
    tab=$(get_tab)
    color_msg "$tab$msg" "$red"
}
export -f fail


#---------------------------------------------
# pass
#
# Echo a message in green text.
#
function pass () {
    local msg="pass"
    let "PASSES += 1"
    msg=${1:-$msg}      # Defaults to default msg.
    # If $msg isn't quoted, it's interpreted as multiple args.
    tab=$(get_tab)
    color_msg "$tab$msg" "$green"
}
export -f pass




