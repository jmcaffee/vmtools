#!/usr/bin/env bash
##############################################################################
# File::    createvm
# Purpose:: Create a VirtualBox VM
# 
# Author::    Jeff McAffee 08/21/2012
# Copyright:: Copyright (c) 2012, kTech Systems LLC. All rights reserved.
# Website::   http://ktechsystems.com
##############################################################################

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

##############################################
# Functions
#

source $SCRIPT_DIR/__vmtools.sh


usage() {
  echo "Usage: sudo `basename $0` {vm-name}"
}

##############################################
# Validation Checks
#

# Set required UID based on the terminal.
# In windows, the terminal is cygwin.
if [[ "x$(uname)" != "xLinux" ]]; then
  required_uid=500;
else
  required_uid=0;
fi

# Check for proper number of command line args.
expected_args=1
e_badargs=65
if [ $UID -ne $required_uid ] || [ $# -ne $expected_args ]
then
    usage
    exit $e_badargs
fi

##############################################
# Variables
#

vm_name=$1
vm_root=$VMTOOLS_ACTIVE_VMS/$vm_name
vm_scripts=$vm_root/scripts
vmdk=turnkey-rails-11.3-lucid-x86

select_vmdk "rails"
vmzip=$(get_vmdk_zip)

# Strip the suffix from the vmdk zip filename
suff="-vmdk.zip"
vmdk=${vmzip%$suff}.vmdk
echo "vmdk:$vmdk"
#exit 0;

##############################################
# Clone VMDK file
#

mkdir -p $vm_root
unzip -j $VMTOOLS_AVAIL_VMS/$vmzip -d $vm_root

##############################################
# Create the VM
#

if ( VBoxManage createvm --name $vm_name --basefolder $VMTOOLS_ACTIVE_VMS --ostype Linux --register ); then
  echo "VM created. Modifying VM..."
else
  exit $e_badargs
fi

##############################################
# Modify the VM - set the correct settings
#

VBoxManage modifyvm $vm_name --memory 256
VBoxManage modifyvm $vm_name --pae on
VBoxManage modifyvm $vm_name --nic1 bridged
VBoxManage modifyvm $vm_name --bridgeadapter1 eth0
VBoxManage modifyvm $vm_name --vrde off

# Add storage controllers (must be done before adding HDDs).

VBoxManage storagectl $vm_name --name "IDE Controller" --add ide --bootable on
VBoxManage storagectl $vm_name --name "SATA Controller" --add sata --bootable on --controller IntelAhci

# Now attach the hard drive

VBoxManage storageattach $vm_name --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium $vm_root/$vmdk




##############################################
# Show what we've created
#

VBoxManage showvminfo $vm_name




#########################################
# Create upstart scripts
#

echo -n "Owner's username (default: root): "
read owner
if [[ "x$owner" == "x" ]]; then
  owner=root
  echo "Owner will be root"
fi

starton="start on (local-filesystems and net-device-up IFACE=eth0)"
echo -n "Start VM at boot (Y/n)? "
read start_at_boot
if [[ "x$start_at_boot" != "xY" ]]; then
  starton="# $starton"
  echo "$vm_name VM will *not* start at boot"
else
  echo "$vm_name VM *will* start at boot"
fi

mkdir -p $vm_scripts

# Create a upstart version without remote desktop.

(sed -e 's/USERNAME/'$owner'/g' \
     -e 's/VMNAME/'$1'/g'       \
     -e 's/STARTON/'$starton'/g' <<EOF
description "VMNAME VM"
author "Jeff McAffee"

# Uncomment the following line to have VM start on start up.
STARTON

# Stop the VM when the system goes down. Our pre-stop script has
# already run at this point, the VM stopped with 'savestate'.
stop on runlevel [016]

console output

env user=USERNAME
env vmname=VMNAME

# Restart VM if it shuts down, stop trying after 5 bounces in 10 seconds.
respawn
respawn limit 5 10

pre-stop script
su $user -c "VBoxManage controlvm $vmname savestate"
end script

exec su $user -c "VBoxHeadless --startvm $vmname --vrde=off"

EOF
) >$vm_scripts/vm-$vm_name.conf



# Create a upstart version turning on remote desktop.

(sed -e 's/USERNAME/'$owner'/g' \
     -e 's/VMNAME/'$1'/g'       \
     -e 's/STARTON/'$starton'/g' <<EOF
description "VMNAME VM"
author "Jeff McAffee"

# Uncomment the following line to have VM start on start up.
STARTON

# Stop the VM when the system goes down. Our pre-stop script has
# already run at this point, the VM stopped with 'savestate'.
stop on runlevel [016]

console output

env user=USERNAME
env vmname=VMNAME

# Restart VM if it shuts down, stop trying after 5 bounces in 10 seconds.
respawn
respawn limit 5 10

pre-stop script
su $user -c "VBoxManage controlvm $vmname savestate"
end script

exec su $user -c "VBoxHeadless --startvm $vmname --vrde=on"

EOF
) >$vm_scripts/vm-$vm_name-rd.conf



##############################################
# Copy upstart scripts to /etc/init/
#

cp $vm_scripts/vm-$vm_name.conf /etc/init/
cp $vm_scripts/vm-$vm_name-rd.conf /etc/init/



##############################################
# Start the VM
#

echo "Starting VM with: $ start vm-$vm_name-rd"
start vm-$vm_name-rd
